/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { Step } from "@fireenjin/components/dist/types/typings";
import { FireEnjinFetchEvent, FireEnjinSubmitEvent, FireEnjinTriggerInput } from "@fireenjin/sdk";
import { Color } from "@ionic/core";
import { User } from "../../core/src/sdk";
export namespace Components {
    interface FireenjinGraphPaySplits {
        "graphTitle": string;
        "setUsers": (users: any) => Promise<any[]>;
        "users": any[];
    }
    interface FloodteamBookFlow {
        /**
          * The service address captured in the flow
         */
        "address": any;
        "algoliaAppId": string;
        "algoliaIndex": string;
        "algoliaSearchKey": string;
        /**
          * The current path of the flow they are in
         */
        "currentPath": string;
        /**
          * The current step of the path they are on
         */
        "currentStep": string;
        /**
          * The name of the customer captured in the flow
         */
        "customer": string;
        "findLocation": (id: string) => Promise<any>;
        /**
          * The Google Maps API Key
         */
        "googleMapsKey": any;
        /**
          * The ID of the location
         */
        "locationId": string;
        /**
          * The phone number captured in the flow
         */
        "phone": string;
        /**
          * The ID of the referring user
         */
        "referralId": string;
        /**
          * Is the user referring?
         */
        "referring": boolean;
        /**
          * Set the path of the flow
          * @param path The path name to change to
          * @returns A list of steps for the current path
         */
        "setPath": (path?: string) => Promise<Step[]>;
        /**
          * The campaign or API token
         */
        "token": string;
    }
    interface FloodteamBookNow {
        /**
          * The Google Maps API Key
         */
        "googleMapsKey": any;
        /**
          * The ID of the location
         */
        "locationId": string;
        /**
          * The ID of the referring user
         */
        "referralId": string;
        /**
          * Is the user referring?
         */
        "referring": boolean;
        /**
          * The campaign or API token
         */
        "token": string;
    }
    interface FloodteamCheckmark {
        /**
          * Start the animation
         */
        "animating": boolean;
        /**
          * The size of the thumb
         */
        "size": string;
    }
    interface FloodteamEpay {
        /**
          * Confirm a check payment
         */
        "confirmPayment": (options?: any) => Promise<any>;
        "customer": any;
        "dadeKey": string;
        "dadeUrl": string;
        "disableFetch": boolean;
        /**
          * The error message to display
         */
        "error": string;
        "job": any;
        "jobId": string;
        /**
          * The amount of money owed
         */
        "owed": any;
        "paymentId": string;
        "paymentMethod": "card" | "check" | "manual" | "ach";
        "paymentType": "insurance" | "codeblue";
        /**
          * The list of payments
         */
        "payments": {
    timestamp: string;
    brand: string;
    last4: number;
    amount: number;
  }[];
        "reset": () => Promise<void>;
        /**
          * The slide to show when loading the component
         */
        "showSlide": | "report"
    | "details"
    | "payments"
    | "card"
    | "check"
    | "confirmation";
        "stripeKey": string;
        "success": () => Promise<void>;
        "takePayment": () => Promise<void>;
        /**
          * The total amount of money billed
         */
        "total": any;
        /**
          * Update the ion-slides height
         */
        "updateSlides": () => Promise<void>;
        "userId": string;
        "users": any[];
    }
    interface FloodteamError {
        /**
          * The color of the component
         */
        "color": string;
        /**
          * The icon to use
         */
        "iconName": string;
        /**
          * The error message to display
         */
        "message": string;
    }
    interface FloodteamFallback {
        /**
          * An icon to display above the fallback message
         */
        "icon": string;
        /**
          * The message to display as a fallback
         */
        "message": string;
    }
    interface FloodteamFeedCard {
        /**
          * An optional action button to show on the card
         */
        "actionButtons"?: {
    action: string;
    size?: "small" | "default" | "large";
    fill?: "clear" | "outline" | "solid" | "default";
    color?: string;
    iconStart?: string;
    iconEnd?: string;
    text?: string;
    href?: string;
  }[];
        /**
          * The background image to use for the card
         */
        "backgroundImage"?: string;
        /**
          * When the feed item was created
         */
        "createdAt"?: Date;
        /**
          * The more in depth details about the feed card
         */
        "details"?: string;
        /**
          * The main text at the top of the feed card
         */
        "heading"?: string;
        /**
          * The image to display at the top left of the feed card
         */
        "image"?: string;
        /**
          * The component to load into a modal that will display on load
         */
        "modal"?: string;
        /**
          * Payload data to send through the feed card
         */
        "payload"?: any;
        /**
          * Whether the message has been read
         */
        "read"?: boolean;
        /**
          * The subtext to display under the title
         */
        "subtext"?: string;
        /**
          * A list of tags that apply to this feed card
         */
        "tags"?: string[];
    }
    interface FloodteamFlipCard {
        "backImage": string;
        "flip": (event?: any) => Promise<void>;
        "flipped": boolean;
        "frontImage": string;
        "hideRefresh": boolean;
    }
    interface FloodteamInputMaterial {
        "label": string;
        "labelPosition": "stacked" | "fixed" | "floating";
        "list": string;
        "multiple": boolean;
        "name": string;
        "options": { label: string; value: any }[];
        "placeholder": string;
        "value": any;
    }
    interface FloodteamInputRoom {
        "label": string;
        "labelPosition": "stacked" | "fixed" | "floating";
        "list": string;
        "multiple": boolean;
        "name": string;
        "options"?: { label: string; value: any }[];
        "placeholder": string;
        "required": boolean;
        "value": any;
    }
    interface FloodteamInputTotallerType {
        "label": string;
        "labelPosition": "stacked" | "fixed" | "floating";
        "list": string;
        "name": string;
        "options"?: { label: string; value: any }[];
        "placeholder": string;
        "required": boolean;
        "value": any;
    }
    interface FloodteamItemJob {
        "isAdmin": boolean;
        "job": any;
        "lines"?: "none" | "inset" | "full";
    }
    interface FloodteamItemSite {
        "detail": boolean;
        "disabled": boolean;
        "href"?: string;
        "site": any;
    }
    interface FloodteamItemUser {
        "disabled": boolean;
        "jobId": string;
        "role": string;
        "user": any;
    }
    interface FloodteamJobProgress {
        "color": Color;
        "name": string;
        "scrollable": boolean;
        "statuses": string[];
        "value": string;
    }
    interface FloodteamLocationBar {
        "algoliaAppId": string;
        "algoliaIndex": string;
        "algoliaSearchKey": string;
        "findLocation": (id: string) => Promise<{ objectID?: string; name?: string; path?: string; id?: string; email?: string; phone?: string; type?: string; address?: any; isSearchable?: boolean; createdAt?: number; updatedAt?: number; _geoloc?: { lat: string; lng: string; }; taxId?: string; lastModified?: number; }>;
        "locationId": string;
        "query": any;
        "search": (query: any, options: any) => Promise<any>;
    }
    interface FloodteamNavigationFooter {
    }
    interface FloodteamNavigationHeader {
        "isLoggedIn": boolean;
        "navigationView": string;
    }
    interface FloodteamNavigationMenu {
        "feedFetchData": any;
        "isAdmin": boolean;
        "isInternalTeam": boolean;
        "isLoggedIn": boolean;
        "jobId": string;
        "locationId": string;
        "locations": any[];
        "navigationView": string;
        "pins": any[];
        "profile": any;
        "templates": any[];
        "userId": string;
    }
    interface FloodteamPayCard {
        "darkMode": boolean;
        "getCardToken": () => Promise<any>;
        "stripeKey": string;
        "stripeStyle": any;
    }
    interface FloodteamPayCheck {
        "amount": number;
        "apiKey": string;
        "confirmPayment": (options?: {}) => Promise<any>;
        "flipCard": () => Promise<void>;
        "loading": boolean;
        "openCamera": (scanningBack?: boolean) => Promise<void>;
        "paymentId": string;
        "url": string;
        "userId": string;
    }
    interface FloodteamPaymentFlow {
        "amount": number;
        "checkAmount": number;
        "checkBack": string;
        "checkFront": string;
        "currentPath": string;
        "currentStep": string;
        "email": string;
        "jobId": string;
        "method": string;
        /**
          * Set the path of the flow d
          * @param path The path name to change to
          * @returns A list of steps for the current path
         */
        "setPath": (path?: string) => Promise<Step[]>;
        "user": Partial<User>;
    }
    interface FloodteamPaymentMethods {
        "address": any;
        "cardName": string;
        "googleMapsKey": string;
        "methods": any[];
        "payType": "card" | "checking";
        "sessionId": string;
        "stripeKey": string;
        "userId": string;
    }
    interface FloodteamPhotoCarousel {
        "addButtonColor": Color;
        "badgeColor": Color;
        "currentSlide": number;
        "getCurrentSlide": () => Promise<number>;
        "getPhoto": () => Promise<any>;
        "hideAddButton": boolean;
        "jobId": string;
        "multiple": boolean;
        "name": string;
        "options": any;
        "photos": any[];
        "selectFiles": () => Promise<void>;
        "siteId": string;
        "slideNext": () => Promise<void>;
        "slidePrev": () => Promise<void>;
        "slideTo": (slideNumber: number) => Promise<void>;
        "tags": string[];
        "type": string;
        "update": () => Promise<void>;
        "uploadPath": string;
    }
    interface FloodteamPhotoCropper {
        "aspectRatio": number;
        "getCroppedCanvas": (options: any) => Promise<any>;
        "getImageData": (type?: string, quality?: number) => Promise<any>;
        "replace": (src: string, hasSameSize?: boolean) => Promise<any>;
        "reset": () => Promise<any>;
        "setAspectRatio": (aspectRatio: number) => Promise<void>;
        "src": string;
    }
    interface FloodteamPhotoGallery {
        "photos": string[];
    }
    interface FloodteamPinBar {
        "pins": any[];
        "profile": any;
        "reorder": boolean;
    }
    interface FloodteamSelectJobServiceTypes {
        "disabled": boolean;
        "icon": string;
        "jobId": string;
        "locationId": string;
        "name": string;
        "value": string[];
    }
    interface FloodteamSelectLocation {
        "disabled": boolean;
        "jobId": string;
        "locations": any[];
        "name": string;
        "value": string;
    }
    interface FloodteamSelectLostReason {
        "disabled": boolean;
        "jobId": string;
        "name": string;
        "value": string;
    }
    interface FloodteamSelectRole {
        "disabled": boolean;
        "jobId": string;
        "name": string;
        "userId": string;
        "value": string;
    }
    interface FloodteamSelectStatus {
        "disabled": boolean;
        "jobId": string;
        "name": string;
        "value": string;
    }
    interface FloodteamServiceCard {
        "src": string;
    }
    interface FloodteamSignaturePad {
        /**
          * The background color for the signature pad
         */
        "backgroundColor": string;
        /**
          * Clear the signature field
         */
        "clear": () => Promise<any>;
        /**
          * The text to display on the clear button
         */
        "clearText": string;
        /**
          * Radius of a single dot
         */
        "dotSize": number;
        /**
          * Download a file via a new browser tab
          * @param dataURL The signature image file data
          * @param filename The name of the file
         */
        "download": (dataURL: any, filename: any) => Promise<void>;
        /**
          * Download the signature as a JPG file
         */
        "downloadJPG": () => Promise<void>;
        /**
          * Download the signature as a PNG file
         */
        "downloadPNG": () => Promise<void>;
        /**
          * Download the signature as an SVG file
         */
        "downloadSVG": () => Promise<void>;
        /**
          * Fill the signature pad from data
          * @param data The signature data
         */
        "fromData": (data: any) => Promise<any>;
        "getSignatureInstace": () => Promise<any>;
        /**
          * Check if the signature pad is empty
         */
        "isEmpty": () => Promise<any>;
        /**
          * The label to display below signature pad
         */
        "label": string;
        /**
          * Maximum width of a line
         */
        "maxWidth": number;
        /**
          * Add the next point only if the previous one is farther than x pixels
         */
        "minDistance": number;
        /**
          * Minimum width of a line
         */
        "minWidth": number;
        /**
          * The name of the element
         */
        "name": string;
        /**
          * Color used to draw the lines. Can be any color format accepted by context.fillStyle
         */
        "penColor": string;
        /**
          * Resize the canvas based on browser
         */
        "resizeCanvas": () => Promise<void>;
        /**
          * Update the value and emit ionChange event
         */
        "submit": () => Promise<void>;
        /**
          * The text to display on the submit button
         */
        "submitText": string;
        /**
          * Draw the next point at most once per every x milliseconds. Set it to 0 to turn off throttling
         */
        "throttle": number;
        /**
          * Get the signature pad data
         */
        "toData": () => Promise<any>;
        "toDataURL": (type?: string) => Promise<any>;
        /**
          * Undo the last stroke from the signature
         */
        "undo": () => Promise<any>;
        /**
          * The current data for the signature pad
         */
        "value": any;
        /**
          * Weight used to modify new velocity based on the previous velocity
         */
        "velocityFilterWeight": number;
    }
    interface FloodteamSnapshotCard {
        "active": boolean;
        "buttonProps": {};
        "buttonText": string;
        "disableShrink": boolean;
        "href": string;
        "photo": string;
    }
    interface FloodteamTemplate {
        "allowFullscreen": boolean;
        "data": any;
        "disableFrame": boolean;
        "disablePosition": boolean;
        "helpers": any;
        "partials": any[];
        "rawHtml": string;
        "resize": boolean;
        "template": any;
        "templateId": string;
        "zoom": number;
    }
    interface FloodteamTitleBar {
        "back"?: string;
        "disableUnderline"?: boolean;
        "heading"?: number;
        "icon"?: string;
        "pin"?: any;
        "pins": any[];
    }
    interface FloodteamTotalGraph {
        "dataSets": any[];
        "groupBy": string;
        "labels": string[];
        "totaller": any;
        "totallerId": string;
        "type": "bar" | "line" | "pie";
    }
    interface FloodteamTotallerCardList {
        "groupBy": string;
        "label": string;
        "timeframe": Date;
        "totallerIds": any[];
    }
    interface FloodteamTotallerCards {
        "totallerId": string;
        "totals": { [sumName: string]: any };
    }
    interface FloodteamWaves {
        "color": string;
        "dip": string;
        "moving": boolean;
        "size": string;
        "speed": string;
    }
}
export interface FloodteamEpayCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFloodteamEpayElement;
}
export interface FloodteamFeedCardCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFloodteamFeedCardElement;
}
export interface FloodteamFlipCardCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFloodteamFlipCardElement;
}
export interface FloodteamInputMaterialCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFloodteamInputMaterialElement;
}
export interface FloodteamInputRoomCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFloodteamInputRoomElement;
}
export interface FloodteamInputTotallerTypeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFloodteamInputTotallerTypeElement;
}
export interface FloodteamItemSiteCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFloodteamItemSiteElement;
}
export interface FloodteamItemUserCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFloodteamItemUserElement;
}
export interface FloodteamNavigationHeaderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFloodteamNavigationHeaderElement;
}
export interface FloodteamNavigationMenuCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFloodteamNavigationMenuElement;
}
export interface FloodteamPayCardCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFloodteamPayCardElement;
}
export interface FloodteamPayCheckCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFloodteamPayCheckElement;
}
export interface FloodteamPaymentMethodsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFloodteamPaymentMethodsElement;
}
export interface FloodteamPhotoCarouselCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFloodteamPhotoCarouselElement;
}
export interface FloodteamPhotoGalleryCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFloodteamPhotoGalleryElement;
}
export interface FloodteamPinBarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFloodteamPinBarElement;
}
export interface FloodteamSelectJobServiceTypesCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFloodteamSelectJobServiceTypesElement;
}
export interface FloodteamSelectLocationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFloodteamSelectLocationElement;
}
export interface FloodteamSelectLostReasonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFloodteamSelectLostReasonElement;
}
export interface FloodteamSelectRoleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFloodteamSelectRoleElement;
}
export interface FloodteamSelectStatusCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFloodteamSelectStatusElement;
}
export interface FloodteamSignaturePadCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFloodteamSignaturePadElement;
}
export interface FloodteamSnapshotCardCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFloodteamSnapshotCardElement;
}
export interface FloodteamTitleBarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFloodteamTitleBarElement;
}
export interface FloodteamTotalGraphCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFloodteamTotalGraphElement;
}
export interface FloodteamTotallerCardListCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFloodteamTotallerCardListElement;
}
export interface FloodteamTotallerCardsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFloodteamTotallerCardsElement;
}
declare global {
    interface HTMLFireenjinGraphPaySplitsElement extends Components.FireenjinGraphPaySplits, HTMLStencilElement {
    }
    var HTMLFireenjinGraphPaySplitsElement: {
        prototype: HTMLFireenjinGraphPaySplitsElement;
        new (): HTMLFireenjinGraphPaySplitsElement;
    };
    interface HTMLFloodteamBookFlowElement extends Components.FloodteamBookFlow, HTMLStencilElement {
    }
    var HTMLFloodteamBookFlowElement: {
        prototype: HTMLFloodteamBookFlowElement;
        new (): HTMLFloodteamBookFlowElement;
    };
    interface HTMLFloodteamBookNowElement extends Components.FloodteamBookNow, HTMLStencilElement {
    }
    var HTMLFloodteamBookNowElement: {
        prototype: HTMLFloodteamBookNowElement;
        new (): HTMLFloodteamBookNowElement;
    };
    interface HTMLFloodteamCheckmarkElement extends Components.FloodteamCheckmark, HTMLStencilElement {
    }
    var HTMLFloodteamCheckmarkElement: {
        prototype: HTMLFloodteamCheckmarkElement;
        new (): HTMLFloodteamCheckmarkElement;
    };
    interface HTMLFloodteamEpayElement extends Components.FloodteamEpay, HTMLStencilElement {
    }
    var HTMLFloodteamEpayElement: {
        prototype: HTMLFloodteamEpayElement;
        new (): HTMLFloodteamEpayElement;
    };
    interface HTMLFloodteamErrorElement extends Components.FloodteamError, HTMLStencilElement {
    }
    var HTMLFloodteamErrorElement: {
        prototype: HTMLFloodteamErrorElement;
        new (): HTMLFloodteamErrorElement;
    };
    interface HTMLFloodteamFallbackElement extends Components.FloodteamFallback, HTMLStencilElement {
    }
    var HTMLFloodteamFallbackElement: {
        prototype: HTMLFloodteamFallbackElement;
        new (): HTMLFloodteamFallbackElement;
    };
    interface HTMLFloodteamFeedCardElement extends Components.FloodteamFeedCard, HTMLStencilElement {
    }
    var HTMLFloodteamFeedCardElement: {
        prototype: HTMLFloodteamFeedCardElement;
        new (): HTMLFloodteamFeedCardElement;
    };
    interface HTMLFloodteamFlipCardElement extends Components.FloodteamFlipCard, HTMLStencilElement {
    }
    var HTMLFloodteamFlipCardElement: {
        prototype: HTMLFloodteamFlipCardElement;
        new (): HTMLFloodteamFlipCardElement;
    };
    interface HTMLFloodteamInputMaterialElement extends Components.FloodteamInputMaterial, HTMLStencilElement {
    }
    var HTMLFloodteamInputMaterialElement: {
        prototype: HTMLFloodteamInputMaterialElement;
        new (): HTMLFloodteamInputMaterialElement;
    };
    interface HTMLFloodteamInputRoomElement extends Components.FloodteamInputRoom, HTMLStencilElement {
    }
    var HTMLFloodteamInputRoomElement: {
        prototype: HTMLFloodteamInputRoomElement;
        new (): HTMLFloodteamInputRoomElement;
    };
    interface HTMLFloodteamInputTotallerTypeElement extends Components.FloodteamInputTotallerType, HTMLStencilElement {
    }
    var HTMLFloodteamInputTotallerTypeElement: {
        prototype: HTMLFloodteamInputTotallerTypeElement;
        new (): HTMLFloodteamInputTotallerTypeElement;
    };
    interface HTMLFloodteamItemJobElement extends Components.FloodteamItemJob, HTMLStencilElement {
    }
    var HTMLFloodteamItemJobElement: {
        prototype: HTMLFloodteamItemJobElement;
        new (): HTMLFloodteamItemJobElement;
    };
    interface HTMLFloodteamItemSiteElement extends Components.FloodteamItemSite, HTMLStencilElement {
    }
    var HTMLFloodteamItemSiteElement: {
        prototype: HTMLFloodteamItemSiteElement;
        new (): HTMLFloodteamItemSiteElement;
    };
    interface HTMLFloodteamItemUserElement extends Components.FloodteamItemUser, HTMLStencilElement {
    }
    var HTMLFloodteamItemUserElement: {
        prototype: HTMLFloodteamItemUserElement;
        new (): HTMLFloodteamItemUserElement;
    };
    interface HTMLFloodteamJobProgressElement extends Components.FloodteamJobProgress, HTMLStencilElement {
    }
    var HTMLFloodteamJobProgressElement: {
        prototype: HTMLFloodteamJobProgressElement;
        new (): HTMLFloodteamJobProgressElement;
    };
    interface HTMLFloodteamLocationBarElement extends Components.FloodteamLocationBar, HTMLStencilElement {
    }
    var HTMLFloodteamLocationBarElement: {
        prototype: HTMLFloodteamLocationBarElement;
        new (): HTMLFloodteamLocationBarElement;
    };
    interface HTMLFloodteamNavigationFooterElement extends Components.FloodteamNavigationFooter, HTMLStencilElement {
    }
    var HTMLFloodteamNavigationFooterElement: {
        prototype: HTMLFloodteamNavigationFooterElement;
        new (): HTMLFloodteamNavigationFooterElement;
    };
    interface HTMLFloodteamNavigationHeaderElement extends Components.FloodteamNavigationHeader, HTMLStencilElement {
    }
    var HTMLFloodteamNavigationHeaderElement: {
        prototype: HTMLFloodteamNavigationHeaderElement;
        new (): HTMLFloodteamNavigationHeaderElement;
    };
    interface HTMLFloodteamNavigationMenuElement extends Components.FloodteamNavigationMenu, HTMLStencilElement {
    }
    var HTMLFloodteamNavigationMenuElement: {
        prototype: HTMLFloodteamNavigationMenuElement;
        new (): HTMLFloodteamNavigationMenuElement;
    };
    interface HTMLFloodteamPayCardElement extends Components.FloodteamPayCard, HTMLStencilElement {
    }
    var HTMLFloodteamPayCardElement: {
        prototype: HTMLFloodteamPayCardElement;
        new (): HTMLFloodteamPayCardElement;
    };
    interface HTMLFloodteamPayCheckElement extends Components.FloodteamPayCheck, HTMLStencilElement {
    }
    var HTMLFloodteamPayCheckElement: {
        prototype: HTMLFloodteamPayCheckElement;
        new (): HTMLFloodteamPayCheckElement;
    };
    interface HTMLFloodteamPaymentFlowElement extends Components.FloodteamPaymentFlow, HTMLStencilElement {
    }
    var HTMLFloodteamPaymentFlowElement: {
        prototype: HTMLFloodteamPaymentFlowElement;
        new (): HTMLFloodteamPaymentFlowElement;
    };
    interface HTMLFloodteamPaymentMethodsElement extends Components.FloodteamPaymentMethods, HTMLStencilElement {
    }
    var HTMLFloodteamPaymentMethodsElement: {
        prototype: HTMLFloodteamPaymentMethodsElement;
        new (): HTMLFloodteamPaymentMethodsElement;
    };
    interface HTMLFloodteamPhotoCarouselElement extends Components.FloodteamPhotoCarousel, HTMLStencilElement {
    }
    var HTMLFloodteamPhotoCarouselElement: {
        prototype: HTMLFloodteamPhotoCarouselElement;
        new (): HTMLFloodteamPhotoCarouselElement;
    };
    interface HTMLFloodteamPhotoCropperElement extends Components.FloodteamPhotoCropper, HTMLStencilElement {
    }
    var HTMLFloodteamPhotoCropperElement: {
        prototype: HTMLFloodteamPhotoCropperElement;
        new (): HTMLFloodteamPhotoCropperElement;
    };
    interface HTMLFloodteamPhotoGalleryElement extends Components.FloodteamPhotoGallery, HTMLStencilElement {
    }
    var HTMLFloodteamPhotoGalleryElement: {
        prototype: HTMLFloodteamPhotoGalleryElement;
        new (): HTMLFloodteamPhotoGalleryElement;
    };
    interface HTMLFloodteamPinBarElement extends Components.FloodteamPinBar, HTMLStencilElement {
    }
    var HTMLFloodteamPinBarElement: {
        prototype: HTMLFloodteamPinBarElement;
        new (): HTMLFloodteamPinBarElement;
    };
    interface HTMLFloodteamSelectJobServiceTypesElement extends Components.FloodteamSelectJobServiceTypes, HTMLStencilElement {
    }
    var HTMLFloodteamSelectJobServiceTypesElement: {
        prototype: HTMLFloodteamSelectJobServiceTypesElement;
        new (): HTMLFloodteamSelectJobServiceTypesElement;
    };
    interface HTMLFloodteamSelectLocationElement extends Components.FloodteamSelectLocation, HTMLStencilElement {
    }
    var HTMLFloodteamSelectLocationElement: {
        prototype: HTMLFloodteamSelectLocationElement;
        new (): HTMLFloodteamSelectLocationElement;
    };
    interface HTMLFloodteamSelectLostReasonElement extends Components.FloodteamSelectLostReason, HTMLStencilElement {
    }
    var HTMLFloodteamSelectLostReasonElement: {
        prototype: HTMLFloodteamSelectLostReasonElement;
        new (): HTMLFloodteamSelectLostReasonElement;
    };
    interface HTMLFloodteamSelectRoleElement extends Components.FloodteamSelectRole, HTMLStencilElement {
    }
    var HTMLFloodteamSelectRoleElement: {
        prototype: HTMLFloodteamSelectRoleElement;
        new (): HTMLFloodteamSelectRoleElement;
    };
    interface HTMLFloodteamSelectStatusElement extends Components.FloodteamSelectStatus, HTMLStencilElement {
    }
    var HTMLFloodteamSelectStatusElement: {
        prototype: HTMLFloodteamSelectStatusElement;
        new (): HTMLFloodteamSelectStatusElement;
    };
    interface HTMLFloodteamServiceCardElement extends Components.FloodteamServiceCard, HTMLStencilElement {
    }
    var HTMLFloodteamServiceCardElement: {
        prototype: HTMLFloodteamServiceCardElement;
        new (): HTMLFloodteamServiceCardElement;
    };
    interface HTMLFloodteamSignaturePadElement extends Components.FloodteamSignaturePad, HTMLStencilElement {
    }
    var HTMLFloodteamSignaturePadElement: {
        prototype: HTMLFloodteamSignaturePadElement;
        new (): HTMLFloodteamSignaturePadElement;
    };
    interface HTMLFloodteamSnapshotCardElement extends Components.FloodteamSnapshotCard, HTMLStencilElement {
    }
    var HTMLFloodteamSnapshotCardElement: {
        prototype: HTMLFloodteamSnapshotCardElement;
        new (): HTMLFloodteamSnapshotCardElement;
    };
    interface HTMLFloodteamTemplateElement extends Components.FloodteamTemplate, HTMLStencilElement {
    }
    var HTMLFloodteamTemplateElement: {
        prototype: HTMLFloodteamTemplateElement;
        new (): HTMLFloodteamTemplateElement;
    };
    interface HTMLFloodteamTitleBarElement extends Components.FloodteamTitleBar, HTMLStencilElement {
    }
    var HTMLFloodteamTitleBarElement: {
        prototype: HTMLFloodteamTitleBarElement;
        new (): HTMLFloodteamTitleBarElement;
    };
    interface HTMLFloodteamTotalGraphElement extends Components.FloodteamTotalGraph, HTMLStencilElement {
    }
    var HTMLFloodteamTotalGraphElement: {
        prototype: HTMLFloodteamTotalGraphElement;
        new (): HTMLFloodteamTotalGraphElement;
    };
    interface HTMLFloodteamTotallerCardListElement extends Components.FloodteamTotallerCardList, HTMLStencilElement {
    }
    var HTMLFloodteamTotallerCardListElement: {
        prototype: HTMLFloodteamTotallerCardListElement;
        new (): HTMLFloodteamTotallerCardListElement;
    };
    interface HTMLFloodteamTotallerCardsElement extends Components.FloodteamTotallerCards, HTMLStencilElement {
    }
    var HTMLFloodteamTotallerCardsElement: {
        prototype: HTMLFloodteamTotallerCardsElement;
        new (): HTMLFloodteamTotallerCardsElement;
    };
    interface HTMLFloodteamWavesElement extends Components.FloodteamWaves, HTMLStencilElement {
    }
    var HTMLFloodteamWavesElement: {
        prototype: HTMLFloodteamWavesElement;
        new (): HTMLFloodteamWavesElement;
    };
    interface HTMLElementTagNameMap {
        "fireenjin-graph-pay-splits": HTMLFireenjinGraphPaySplitsElement;
        "floodteam-book-flow": HTMLFloodteamBookFlowElement;
        "floodteam-book-now": HTMLFloodteamBookNowElement;
        "floodteam-checkmark": HTMLFloodteamCheckmarkElement;
        "floodteam-epay": HTMLFloodteamEpayElement;
        "floodteam-error": HTMLFloodteamErrorElement;
        "floodteam-fallback": HTMLFloodteamFallbackElement;
        "floodteam-feed-card": HTMLFloodteamFeedCardElement;
        "floodteam-flip-card": HTMLFloodteamFlipCardElement;
        "floodteam-input-material": HTMLFloodteamInputMaterialElement;
        "floodteam-input-room": HTMLFloodteamInputRoomElement;
        "floodteam-input-totaller-type": HTMLFloodteamInputTotallerTypeElement;
        "floodteam-item-job": HTMLFloodteamItemJobElement;
        "floodteam-item-site": HTMLFloodteamItemSiteElement;
        "floodteam-item-user": HTMLFloodteamItemUserElement;
        "floodteam-job-progress": HTMLFloodteamJobProgressElement;
        "floodteam-location-bar": HTMLFloodteamLocationBarElement;
        "floodteam-navigation-footer": HTMLFloodteamNavigationFooterElement;
        "floodteam-navigation-header": HTMLFloodteamNavigationHeaderElement;
        "floodteam-navigation-menu": HTMLFloodteamNavigationMenuElement;
        "floodteam-pay-card": HTMLFloodteamPayCardElement;
        "floodteam-pay-check": HTMLFloodteamPayCheckElement;
        "floodteam-payment-flow": HTMLFloodteamPaymentFlowElement;
        "floodteam-payment-methods": HTMLFloodteamPaymentMethodsElement;
        "floodteam-photo-carousel": HTMLFloodteamPhotoCarouselElement;
        "floodteam-photo-cropper": HTMLFloodteamPhotoCropperElement;
        "floodteam-photo-gallery": HTMLFloodteamPhotoGalleryElement;
        "floodteam-pin-bar": HTMLFloodteamPinBarElement;
        "floodteam-select-job-service-types": HTMLFloodteamSelectJobServiceTypesElement;
        "floodteam-select-location": HTMLFloodteamSelectLocationElement;
        "floodteam-select-lost-reason": HTMLFloodteamSelectLostReasonElement;
        "floodteam-select-role": HTMLFloodteamSelectRoleElement;
        "floodteam-select-status": HTMLFloodteamSelectStatusElement;
        "floodteam-service-card": HTMLFloodteamServiceCardElement;
        "floodteam-signature-pad": HTMLFloodteamSignaturePadElement;
        "floodteam-snapshot-card": HTMLFloodteamSnapshotCardElement;
        "floodteam-template": HTMLFloodteamTemplateElement;
        "floodteam-title-bar": HTMLFloodteamTitleBarElement;
        "floodteam-total-graph": HTMLFloodteamTotalGraphElement;
        "floodteam-totaller-card-list": HTMLFloodteamTotallerCardListElement;
        "floodteam-totaller-cards": HTMLFloodteamTotallerCardsElement;
        "floodteam-waves": HTMLFloodteamWavesElement;
    }
}
declare namespace LocalJSX {
    interface FireenjinGraphPaySplits {
        "graphTitle"?: string;
        "users"?: any[];
    }
    interface FloodteamBookFlow {
        /**
          * The service address captured in the flow
         */
        "address"?: any;
        "algoliaAppId"?: string;
        "algoliaIndex"?: string;
        "algoliaSearchKey"?: string;
        /**
          * The current path of the flow they are in
         */
        "currentPath"?: string;
        /**
          * The current step of the path they are on
         */
        "currentStep"?: string;
        /**
          * The name of the customer captured in the flow
         */
        "customer"?: string;
        /**
          * The Google Maps API Key
         */
        "googleMapsKey"?: any;
        /**
          * The ID of the location
         */
        "locationId"?: string;
        /**
          * The phone number captured in the flow
         */
        "phone"?: string;
        /**
          * The ID of the referring user
         */
        "referralId"?: string;
        /**
          * Is the user referring?
         */
        "referring"?: boolean;
        /**
          * The campaign or API token
         */
        "token"?: string;
    }
    interface FloodteamBookNow {
        /**
          * The Google Maps API Key
         */
        "googleMapsKey"?: any;
        /**
          * The ID of the location
         */
        "locationId"?: string;
        /**
          * The ID of the referring user
         */
        "referralId"?: string;
        /**
          * Is the user referring?
         */
        "referring"?: boolean;
        /**
          * The campaign or API token
         */
        "token"?: string;
    }
    interface FloodteamCheckmark {
        /**
          * Start the animation
         */
        "animating"?: boolean;
        /**
          * The size of the thumb
         */
        "size"?: string;
    }
    interface FloodteamEpay {
        "customer"?: any;
        "dadeKey"?: string;
        "dadeUrl"?: string;
        "disableFetch"?: boolean;
        /**
          * The error message to display
         */
        "error"?: string;
        "job"?: any;
        "jobId"?: string;
        "onFireenjinFetch"?: (event: FloodteamEpayCustomEvent<any>) => void;
        "onFireenjinSubmit"?: (event: FloodteamEpayCustomEvent<any>) => void;
        "onFtEpayShowCommisions"?: (event: FloodteamEpayCustomEvent<any>) => void;
        /**
          * The amount of money owed
         */
        "owed"?: any;
        "paymentId"?: string;
        "paymentMethod"?: "card" | "check" | "manual" | "ach";
        "paymentType"?: "insurance" | "codeblue";
        /**
          * The list of payments
         */
        "payments"?: {
    timestamp: string;
    brand: string;
    last4: number;
    amount: number;
  }[];
        /**
          * The slide to show when loading the component
         */
        "showSlide"?: | "report"
    | "details"
    | "payments"
    | "card"
    | "check"
    | "confirmation";
        "stripeKey"?: string;
        /**
          * The total amount of money billed
         */
        "total"?: any;
        "userId"?: string;
        "users"?: any[];
    }
    interface FloodteamError {
        /**
          * The color of the component
         */
        "color"?: string;
        /**
          * The icon to use
         */
        "iconName"?: string;
        /**
          * The error message to display
         */
        "message"?: string;
    }
    interface FloodteamFallback {
        /**
          * An icon to display above the fallback message
         */
        "icon"?: string;
        /**
          * The message to display as a fallback
         */
        "message"?: string;
    }
    interface FloodteamFeedCard {
        /**
          * An optional action button to show on the card
         */
        "actionButtons"?: {
    action: string;
    size?: "small" | "default" | "large";
    fill?: "clear" | "outline" | "solid" | "default";
    color?: string;
    iconStart?: string;
    iconEnd?: string;
    text?: string;
    href?: string;
  }[];
        /**
          * The background image to use for the card
         */
        "backgroundImage"?: string;
        /**
          * When the feed item was created
         */
        "createdAt"?: Date;
        /**
          * The more in depth details about the feed card
         */
        "details"?: string;
        /**
          * The main text at the top of the feed card
         */
        "heading"?: string;
        /**
          * The image to display at the top left of the feed card
         */
        "image"?: string;
        /**
          * The component to load into a modal that will display on load
         */
        "modal"?: string;
        "onFloodteamFeedAction"?: (event: FloodteamFeedCardCustomEvent<any>) => void;
        /**
          * Payload data to send through the feed card
         */
        "payload"?: any;
        /**
          * Whether the message has been read
         */
        "read"?: boolean;
        /**
          * The subtext to display under the title
         */
        "subtext"?: string;
        /**
          * A list of tags that apply to this feed card
         */
        "tags"?: string[];
    }
    interface FloodteamFlipCard {
        "backImage"?: string;
        "flipped"?: boolean;
        "frontImage"?: string;
        "hideRefresh"?: boolean;
        "onFloodteamFlip"?: (event: FloodteamFlipCardCustomEvent<any>) => void;
    }
    interface FloodteamInputMaterial {
        "label"?: string;
        "labelPosition"?: "stacked" | "fixed" | "floating";
        "list"?: string;
        "multiple"?: boolean;
        "name"?: string;
        "onIonChange"?: (event: FloodteamInputMaterialCustomEvent<any>) => void;
        "onIonInput"?: (event: FloodteamInputMaterialCustomEvent<any>) => void;
        "options"?: { label: string; value: any }[];
        "placeholder"?: string;
        "value"?: any;
    }
    interface FloodteamInputRoom {
        "label"?: string;
        "labelPosition"?: "stacked" | "fixed" | "floating";
        "list"?: string;
        "multiple"?: boolean;
        "name"?: string;
        "onIonChange"?: (event: FloodteamInputRoomCustomEvent<any>) => void;
        "onIonInput"?: (event: FloodteamInputRoomCustomEvent<any>) => void;
        "options"?: { label: string; value: any }[];
        "placeholder"?: string;
        "required"?: boolean;
        "value"?: any;
    }
    interface FloodteamInputTotallerType {
        "label"?: string;
        "labelPosition"?: "stacked" | "fixed" | "floating";
        "list"?: string;
        "name"?: string;
        "onIonChange"?: (event: FloodteamInputTotallerTypeCustomEvent<any>) => void;
        "onIonInput"?: (event: FloodteamInputTotallerTypeCustomEvent<any>) => void;
        "options"?: { label: string; value: any }[];
        "placeholder"?: string;
        "required"?: boolean;
        "value"?: any;
    }
    interface FloodteamItemJob {
        "isAdmin"?: boolean;
        "job"?: any;
        "lines"?: "none" | "inset" | "full";
    }
    interface FloodteamItemSite {
        "detail"?: boolean;
        "disabled"?: boolean;
        "href"?: string;
        "onFloodteamOpenSiteEditModal"?: (event: FloodteamItemSiteCustomEvent<any>) => void;
        "site"?: any;
    }
    interface FloodteamItemUser {
        "disabled"?: boolean;
        "jobId"?: string;
        "onFireenjinSubmit"?: (event: FloodteamItemUserCustomEvent<FireEnjinSubmitEvent>) => void;
        "role"?: string;
        "user"?: any;
    }
    interface FloodteamJobProgress {
        "color"?: Color;
        "name"?: string;
        "scrollable"?: boolean;
        "statuses"?: string[];
        "value"?: string;
    }
    interface FloodteamLocationBar {
        "algoliaAppId"?: string;
        "algoliaIndex"?: string;
        "algoliaSearchKey"?: string;
        "locationId"?: string;
        "query"?: any;
    }
    interface FloodteamNavigationFooter {
    }
    interface FloodteamNavigationHeader {
        "isLoggedIn"?: boolean;
        "navigationView"?: string;
        "onFireenjinTrigger"?: (event: FloodteamNavigationHeaderCustomEvent<FireEnjinTriggerInput>) => void;
    }
    interface FloodteamNavigationMenu {
        "feedFetchData"?: any;
        "isAdmin"?: boolean;
        "isInternalTeam"?: boolean;
        "isLoggedIn"?: boolean;
        "jobId"?: string;
        "locationId"?: string;
        "locations"?: any[];
        "navigationView"?: string;
        "onFireenjinSubmit"?: (event: FloodteamNavigationMenuCustomEvent<FireEnjinSubmitEvent>) => void;
        "onFireenjinTrigger"?: (event: FloodteamNavigationMenuCustomEvent<FireEnjinTriggerInput>) => void;
        "pins"?: any[];
        "profile"?: any;
        "templates"?: any[];
        "userId"?: string;
    }
    interface FloodteamPayCard {
        "darkMode"?: boolean;
        "onFtCancel"?: (event: FloodteamPayCardCustomEvent<any>) => void;
        "onFtCardError"?: (event: FloodteamPayCardCustomEvent<any>) => void;
        "onFtSubmitCard"?: (event: FloodteamPayCardCustomEvent<any>) => void;
        "stripeKey"?: string;
        "stripeStyle"?: any;
    }
    interface FloodteamPayCheck {
        "amount"?: number;
        "apiKey"?: string;
        "loading"?: boolean;
        "onFtCancel"?: (event: FloodteamPayCheckCustomEvent<any>) => void;
        "onFtCheckConfirmation"?: (event: FloodteamPayCheckCustomEvent<any>) => void;
        "onFtCheckError"?: (event: FloodteamPayCheckCustomEvent<any>) => void;
        "onFtCheckScan"?: (event: FloodteamPayCheckCustomEvent<any>) => void;
        "onFtSubmitCheck"?: (event: FloodteamPayCheckCustomEvent<any>) => void;
        "paymentId"?: string;
        "url"?: string;
        "userId"?: string;
    }
    interface FloodteamPaymentFlow {
        "amount"?: number;
        "checkAmount"?: number;
        "checkBack"?: string;
        "checkFront"?: string;
        "currentPath"?: string;
        "currentStep"?: string;
        "email"?: string;
        "jobId"?: string;
        "method"?: string;
        "user"?: Partial<User>;
    }
    interface FloodteamPaymentMethods {
        "address"?: any;
        "cardName"?: string;
        "googleMapsKey"?: string;
        "methods"?: any[];
        "onFireenjinFetch"?: (event: FloodteamPaymentMethodsCustomEvent<FireEnjinFetchEvent>) => void;
        "onFireenjinSubmit"?: (event: FloodteamPaymentMethodsCustomEvent<FireEnjinSubmitEvent>) => void;
        "payType"?: "card" | "checking";
        "sessionId"?: string;
        "stripeKey"?: string;
        "userId"?: string;
    }
    interface FloodteamPhotoCarousel {
        "addButtonColor"?: Color;
        "badgeColor"?: Color;
        "currentSlide"?: number;
        "hideAddButton"?: boolean;
        "jobId"?: string;
        "multiple"?: boolean;
        "name"?: string;
        "onFireenjinTrigger"?: (event: FloodteamPhotoCarouselCustomEvent<FireEnjinTriggerInput>) => void;
        "options"?: any;
        "photos"?: any[];
        "siteId"?: string;
        "tags"?: string[];
        "type"?: string;
        "uploadPath"?: string;
    }
    interface FloodteamPhotoCropper {
        "aspectRatio"?: number;
        "src"?: string;
    }
    interface FloodteamPhotoGallery {
        "onFtOpenPhotoCarousel"?: (event: FloodteamPhotoGalleryCustomEvent<any>) => void;
        "photos"?: string[];
    }
    interface FloodteamPinBar {
        "onFireenjinTrigger"?: (event: FloodteamPinBarCustomEvent<FireEnjinTriggerInput>) => void;
        "pins"?: any[];
        "profile"?: any;
        "reorder"?: boolean;
    }
    interface FloodteamSelectJobServiceTypes {
        "disabled"?: boolean;
        "icon"?: string;
        "jobId"?: string;
        "locationId"?: string;
        "name"?: string;
        "onFireenjinSubmit"?: (event: FloodteamSelectJobServiceTypesCustomEvent<FireEnjinSubmitEvent>) => void;
        "onFireenjinTrigger"?: (event: FloodteamSelectJobServiceTypesCustomEvent<FireEnjinTriggerInput>) => void;
        "value"?: string[];
    }
    interface FloodteamSelectLocation {
        "disabled"?: boolean;
        "jobId"?: string;
        "locations"?: any[];
        "name"?: string;
        "onFireenjinSubmit"?: (event: FloodteamSelectLocationCustomEvent<FireEnjinSubmitEvent>) => void;
        "onFireenjinTrigger"?: (event: FloodteamSelectLocationCustomEvent<FireEnjinTriggerInput>) => void;
        "value"?: string;
    }
    interface FloodteamSelectLostReason {
        "disabled"?: boolean;
        "jobId"?: string;
        "name"?: string;
        "onFireenjinSubmit"?: (event: FloodteamSelectLostReasonCustomEvent<FireEnjinSubmitEvent>) => void;
        "onFireenjinTrigger"?: (event: FloodteamSelectLostReasonCustomEvent<FireEnjinTriggerInput>) => void;
        "value"?: string;
    }
    interface FloodteamSelectRole {
        "disabled"?: boolean;
        "jobId"?: string;
        "name"?: string;
        "onFireenjinSubmit"?: (event: FloodteamSelectRoleCustomEvent<FireEnjinSubmitEvent>) => void;
        "onFireenjinTrigger"?: (event: FloodteamSelectRoleCustomEvent<FireEnjinTriggerInput>) => void;
        "userId"?: string;
        "value"?: string;
    }
    interface FloodteamSelectStatus {
        "disabled"?: boolean;
        "jobId"?: string;
        "name"?: string;
        "onFireenjinSubmit"?: (event: FloodteamSelectStatusCustomEvent<FireEnjinSubmitEvent>) => void;
        "onFireenjinTrigger"?: (event: FloodteamSelectStatusCustomEvent<FireEnjinTriggerInput>) => void;
        "value"?: string;
    }
    interface FloodteamServiceCard {
        "src"?: string;
    }
    interface FloodteamSignaturePad {
        /**
          * The background color for the signature pad
         */
        "backgroundColor"?: string;
        /**
          * The text to display on the clear button
         */
        "clearText"?: string;
        /**
          * Radius of a single dot
         */
        "dotSize"?: number;
        /**
          * The label to display below signature pad
         */
        "label"?: string;
        /**
          * Maximum width of a line
         */
        "maxWidth"?: number;
        /**
          * Add the next point only if the previous one is farther than x pixels
         */
        "minDistance"?: number;
        /**
          * Minimum width of a line
         */
        "minWidth"?: number;
        /**
          * The name of the element
         */
        "name"?: string;
        "onIonChange"?: (event: FloodteamSignaturePadCustomEvent<any>) => void;
        "onIonInput"?: (event: FloodteamSignaturePadCustomEvent<any>) => void;
        /**
          * Color used to draw the lines. Can be any color format accepted by context.fillStyle
         */
        "penColor"?: string;
        /**
          * The text to display on the submit button
         */
        "submitText"?: string;
        /**
          * Draw the next point at most once per every x milliseconds. Set it to 0 to turn off throttling
         */
        "throttle"?: number;
        /**
          * The current data for the signature pad
         */
        "value"?: any;
        /**
          * Weight used to modify new velocity based on the previous velocity
         */
        "velocityFilterWeight"?: number;
    }
    interface FloodteamSnapshotCard {
        "active"?: boolean;
        "buttonProps"?: {};
        "buttonText"?: string;
        "disableShrink"?: boolean;
        "href"?: string;
        "onFloodteamClick"?: (event: FloodteamSnapshotCardCustomEvent<any>) => void;
        "photo"?: string;
    }
    interface FloodteamTemplate {
        "allowFullscreen"?: boolean;
        "data"?: any;
        "disableFrame"?: boolean;
        "disablePosition"?: boolean;
        "helpers"?: any;
        "partials"?: any[];
        "rawHtml"?: string;
        "resize"?: boolean;
        "template"?: any;
        "templateId"?: string;
        "zoom"?: number;
    }
    interface FloodteamTitleBar {
        "back"?: string;
        "disableUnderline"?: boolean;
        "heading"?: number;
        "icon"?: string;
        "onFireenjinTrigger"?: (event: FloodteamTitleBarCustomEvent<FireEnjinTriggerInput>) => void;
        "pin"?: any;
        "pins"?: any[];
    }
    interface FloodteamTotalGraph {
        "dataSets"?: any[];
        "groupBy"?: string;
        "labels"?: string[];
        "onFireenjinFetch"?: (event: FloodteamTotalGraphCustomEvent<FireEnjinFetchEvent>) => void;
        "totaller"?: any;
        "totallerId"?: string;
        "type"?: "bar" | "line" | "pie";
    }
    interface FloodteamTotallerCardList {
        "groupBy"?: string;
        "label"?: string;
        "onFireenjinFetch"?: (event: FloodteamTotallerCardListCustomEvent<FireEnjinFetchEvent>) => void;
        "timeframe"?: Date;
        "totallerIds"?: any[];
    }
    interface FloodteamTotallerCards {
        "onFireenjinFetch"?: (event: FloodteamTotallerCardsCustomEvent<FireEnjinFetchEvent>) => void;
        "totallerId"?: string;
        "totals"?: { [sumName: string]: any };
    }
    interface FloodteamWaves {
        "color"?: string;
        "dip"?: string;
        "moving"?: boolean;
        "size"?: string;
        "speed"?: string;
    }
    interface IntrinsicElements {
        "fireenjin-graph-pay-splits": FireenjinGraphPaySplits;
        "floodteam-book-flow": FloodteamBookFlow;
        "floodteam-book-now": FloodteamBookNow;
        "floodteam-checkmark": FloodteamCheckmark;
        "floodteam-epay": FloodteamEpay;
        "floodteam-error": FloodteamError;
        "floodteam-fallback": FloodteamFallback;
        "floodteam-feed-card": FloodteamFeedCard;
        "floodteam-flip-card": FloodteamFlipCard;
        "floodteam-input-material": FloodteamInputMaterial;
        "floodteam-input-room": FloodteamInputRoom;
        "floodteam-input-totaller-type": FloodteamInputTotallerType;
        "floodteam-item-job": FloodteamItemJob;
        "floodteam-item-site": FloodteamItemSite;
        "floodteam-item-user": FloodteamItemUser;
        "floodteam-job-progress": FloodteamJobProgress;
        "floodteam-location-bar": FloodteamLocationBar;
        "floodteam-navigation-footer": FloodteamNavigationFooter;
        "floodteam-navigation-header": FloodteamNavigationHeader;
        "floodteam-navigation-menu": FloodteamNavigationMenu;
        "floodteam-pay-card": FloodteamPayCard;
        "floodteam-pay-check": FloodteamPayCheck;
        "floodteam-payment-flow": FloodteamPaymentFlow;
        "floodteam-payment-methods": FloodteamPaymentMethods;
        "floodteam-photo-carousel": FloodteamPhotoCarousel;
        "floodteam-photo-cropper": FloodteamPhotoCropper;
        "floodteam-photo-gallery": FloodteamPhotoGallery;
        "floodteam-pin-bar": FloodteamPinBar;
        "floodteam-select-job-service-types": FloodteamSelectJobServiceTypes;
        "floodteam-select-location": FloodteamSelectLocation;
        "floodteam-select-lost-reason": FloodteamSelectLostReason;
        "floodteam-select-role": FloodteamSelectRole;
        "floodteam-select-status": FloodteamSelectStatus;
        "floodteam-service-card": FloodteamServiceCard;
        "floodteam-signature-pad": FloodteamSignaturePad;
        "floodteam-snapshot-card": FloodteamSnapshotCard;
        "floodteam-template": FloodteamTemplate;
        "floodteam-title-bar": FloodteamTitleBar;
        "floodteam-total-graph": FloodteamTotalGraph;
        "floodteam-totaller-card-list": FloodteamTotallerCardList;
        "floodteam-totaller-cards": FloodteamTotallerCards;
        "floodteam-waves": FloodteamWaves;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "fireenjin-graph-pay-splits": LocalJSX.FireenjinGraphPaySplits & JSXBase.HTMLAttributes<HTMLFireenjinGraphPaySplitsElement>;
            "floodteam-book-flow": LocalJSX.FloodteamBookFlow & JSXBase.HTMLAttributes<HTMLFloodteamBookFlowElement>;
            "floodteam-book-now": LocalJSX.FloodteamBookNow & JSXBase.HTMLAttributes<HTMLFloodteamBookNowElement>;
            "floodteam-checkmark": LocalJSX.FloodteamCheckmark & JSXBase.HTMLAttributes<HTMLFloodteamCheckmarkElement>;
            "floodteam-epay": LocalJSX.FloodteamEpay & JSXBase.HTMLAttributes<HTMLFloodteamEpayElement>;
            "floodteam-error": LocalJSX.FloodteamError & JSXBase.HTMLAttributes<HTMLFloodteamErrorElement>;
            "floodteam-fallback": LocalJSX.FloodteamFallback & JSXBase.HTMLAttributes<HTMLFloodteamFallbackElement>;
            "floodteam-feed-card": LocalJSX.FloodteamFeedCard & JSXBase.HTMLAttributes<HTMLFloodteamFeedCardElement>;
            "floodteam-flip-card": LocalJSX.FloodteamFlipCard & JSXBase.HTMLAttributes<HTMLFloodteamFlipCardElement>;
            "floodteam-input-material": LocalJSX.FloodteamInputMaterial & JSXBase.HTMLAttributes<HTMLFloodteamInputMaterialElement>;
            "floodteam-input-room": LocalJSX.FloodteamInputRoom & JSXBase.HTMLAttributes<HTMLFloodteamInputRoomElement>;
            "floodteam-input-totaller-type": LocalJSX.FloodteamInputTotallerType & JSXBase.HTMLAttributes<HTMLFloodteamInputTotallerTypeElement>;
            "floodteam-item-job": LocalJSX.FloodteamItemJob & JSXBase.HTMLAttributes<HTMLFloodteamItemJobElement>;
            "floodteam-item-site": LocalJSX.FloodteamItemSite & JSXBase.HTMLAttributes<HTMLFloodteamItemSiteElement>;
            "floodteam-item-user": LocalJSX.FloodteamItemUser & JSXBase.HTMLAttributes<HTMLFloodteamItemUserElement>;
            "floodteam-job-progress": LocalJSX.FloodteamJobProgress & JSXBase.HTMLAttributes<HTMLFloodteamJobProgressElement>;
            "floodteam-location-bar": LocalJSX.FloodteamLocationBar & JSXBase.HTMLAttributes<HTMLFloodteamLocationBarElement>;
            "floodteam-navigation-footer": LocalJSX.FloodteamNavigationFooter & JSXBase.HTMLAttributes<HTMLFloodteamNavigationFooterElement>;
            "floodteam-navigation-header": LocalJSX.FloodteamNavigationHeader & JSXBase.HTMLAttributes<HTMLFloodteamNavigationHeaderElement>;
            "floodteam-navigation-menu": LocalJSX.FloodteamNavigationMenu & JSXBase.HTMLAttributes<HTMLFloodteamNavigationMenuElement>;
            "floodteam-pay-card": LocalJSX.FloodteamPayCard & JSXBase.HTMLAttributes<HTMLFloodteamPayCardElement>;
            "floodteam-pay-check": LocalJSX.FloodteamPayCheck & JSXBase.HTMLAttributes<HTMLFloodteamPayCheckElement>;
            "floodteam-payment-flow": LocalJSX.FloodteamPaymentFlow & JSXBase.HTMLAttributes<HTMLFloodteamPaymentFlowElement>;
            "floodteam-payment-methods": LocalJSX.FloodteamPaymentMethods & JSXBase.HTMLAttributes<HTMLFloodteamPaymentMethodsElement>;
            "floodteam-photo-carousel": LocalJSX.FloodteamPhotoCarousel & JSXBase.HTMLAttributes<HTMLFloodteamPhotoCarouselElement>;
            "floodteam-photo-cropper": LocalJSX.FloodteamPhotoCropper & JSXBase.HTMLAttributes<HTMLFloodteamPhotoCropperElement>;
            "floodteam-photo-gallery": LocalJSX.FloodteamPhotoGallery & JSXBase.HTMLAttributes<HTMLFloodteamPhotoGalleryElement>;
            "floodteam-pin-bar": LocalJSX.FloodteamPinBar & JSXBase.HTMLAttributes<HTMLFloodteamPinBarElement>;
            "floodteam-select-job-service-types": LocalJSX.FloodteamSelectJobServiceTypes & JSXBase.HTMLAttributes<HTMLFloodteamSelectJobServiceTypesElement>;
            "floodteam-select-location": LocalJSX.FloodteamSelectLocation & JSXBase.HTMLAttributes<HTMLFloodteamSelectLocationElement>;
            "floodteam-select-lost-reason": LocalJSX.FloodteamSelectLostReason & JSXBase.HTMLAttributes<HTMLFloodteamSelectLostReasonElement>;
            "floodteam-select-role": LocalJSX.FloodteamSelectRole & JSXBase.HTMLAttributes<HTMLFloodteamSelectRoleElement>;
            "floodteam-select-status": LocalJSX.FloodteamSelectStatus & JSXBase.HTMLAttributes<HTMLFloodteamSelectStatusElement>;
            "floodteam-service-card": LocalJSX.FloodteamServiceCard & JSXBase.HTMLAttributes<HTMLFloodteamServiceCardElement>;
            "floodteam-signature-pad": LocalJSX.FloodteamSignaturePad & JSXBase.HTMLAttributes<HTMLFloodteamSignaturePadElement>;
            "floodteam-snapshot-card": LocalJSX.FloodteamSnapshotCard & JSXBase.HTMLAttributes<HTMLFloodteamSnapshotCardElement>;
            "floodteam-template": LocalJSX.FloodteamTemplate & JSXBase.HTMLAttributes<HTMLFloodteamTemplateElement>;
            "floodteam-title-bar": LocalJSX.FloodteamTitleBar & JSXBase.HTMLAttributes<HTMLFloodteamTitleBarElement>;
            "floodteam-total-graph": LocalJSX.FloodteamTotalGraph & JSXBase.HTMLAttributes<HTMLFloodteamTotalGraphElement>;
            "floodteam-totaller-card-list": LocalJSX.FloodteamTotallerCardList & JSXBase.HTMLAttributes<HTMLFloodteamTotallerCardListElement>;
            "floodteam-totaller-cards": LocalJSX.FloodteamTotallerCards & JSXBase.HTMLAttributes<HTMLFloodteamTotallerCardsElement>;
            "floodteam-waves": LocalJSX.FloodteamWaves & JSXBase.HTMLAttributes<HTMLFloodteamWavesElement>;
        }
    }
}
